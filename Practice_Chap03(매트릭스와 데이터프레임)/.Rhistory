z <- matrix(1:20, 4, 5)
z
View(z)
x <- c(1:4)
x
y <- c(4:5)
y
z <- matrix(1:20, 4, 5)
dim(z)   #관측값들이 몇행 몇열로 이루어져 있는지 알고싶을 때 사용
class(z) #데이터 구조를 알아내는 함수
z
m4 <- cbind(z, x)
m4
z
score <- matrix(c(90,85,96,88,55,77,88,99,100,47,55,33), 4, 3)
score
rownames(score) <- c("존", "홍길동", "方賢奎", "Bang")
colnames(score) <- c("국어", "english", "수학")
score
score[1,1]
score["존"]
score["존",]
score[,"수학"]
sum(score[,"국어"])
mean(score["方賢奎",])
score["方賢奎","수학"] = 100
score
class(x)
x <- c(1,2,3)
class(x)
x <- c("가","나")
class(x)
x <- c(1,2,3)
class(x)
class(x)
city <- c("서울", "도쿄", "워싱턴") # 문자형벡터
rank <- c(1,2,3) # 숫자형 벡터
class(city)
class(rank)
a <- c(1:10)
b <- seq(0.0, 1.0, 0.1)
class(a)
class(b)
cityinfo <- data.frame(city, rank)
class(cityinfo)
cityinfo
cityinfo[1,1]
cityinfo[1,1]
cityinfo[1,]
cityinfo[1,1]
class(cityinfo)
class(cityinfo[,2])
class(city)
class(cityinfo[,2])
class(cityinfo[,1])
city <- c("서울", "도쿄", "워싱턴")
rank <- c(1:3) # 숫자형 벡터
cityinfo <- data.frame(city, rank)
class(cityinfo[,1])
class(city)
class(cityinfo[,2])
class(cityinfo[,1])
class(cityinfo[,1])
class(cityinfo[1,])
class(cityinfo[,1])
class(city)
class(cityinfo)
cityinfo
class(iris)
stri(iris)
dim(iris)
dim(cityinfo)
stri(iris)
str(iris)
class(cityinfo[,1])
cityinfo[,1]
mean(iris[,"Sepal.Length"])
mean(iris[,1])
# 매트릭스, 데이터프레임 다루기
iris
# 행과 열의 개수를 표식하는 함수
dim(iris)
# 행의 개수 출력
nrow(iris)
# 열의 개수 출력
ncol(iris)
#행의 이름 출력
rownames(iris)
# 데이터의 셋의 앞부분 일부 출력
head(iris)
tail(iris)
# 데이터 셋의 요약 정보를 출력
str(iris)
# 데이터셋의 자료구조 출력
class(iris)
mean(iris[,1])
class(cityinfo[,1])
class(cityinfo)
class(city)
iris[,5]
class(city)
class(iris[,5])
levels(iris[,5])
unique(iris[,5])
colSums(iris[,-5])
colMeans(iris[,-5])
rowsum(iris[,-5])
rowSums(iris[,-5])
rowMeans(iris[,-5])
table(iris[,5])
z <- matrix(1:20, 4, 5)
z
t(z)
setosa <- subset(x = iris, Species == "setosa")
setosa
setosa <- subset(iris, Species == "setosa")
setosa
v1 <- subset(iris, (Sepal.Length>5.0) & (Sepal.Width>4.0))
v1
class(v1)
class(b)
b <- matrix(21:40, 4, 5)
class(b)
x <- state.x77
str(x)
dim(x)
class(x)
x <- state.x77
state.x77
x
st <- as.data.frame(x)
class(st)
iris[1,1]
iris$Sepal.Length
st$Area
is.matrix(x)
is.data.frame(x)
is.data.frame(st)
df_exam <- read.csv("csv_exam.csv", t)
df_exam <- read.csv("csv_exam.csv", T)
dim(df_exam)
View(df_exam)
df_exam <- read.csv("csv_exam.csv", F)
View(df_exam)
df_exam <- read.csv("csv_exam.csv", T)
View(df_exam)
df_exam
df_exam <- read.csv("csv_exam.csv", F)
df_exam
df_exam <- read.csv("csv_exam.csv", T)
rm(df_exam)
df_exam
setwd("C:\Users\Administrator\Google 드라이브\R\Practice_Chap03(매트릭스와 데이터프레임)")
setwd("C:/Users/Administrator/Google 드라이브/R/Practice_Chap03(매트릭스와 데이터프레임)")
setoda <- subset(iris, Species == "setosa")
setosa
write.csv(setosa, "setosa.csv", T)
write.csv(setosa, "setosa.csv", row.names = F)
install.packages("readxl")
library(readxl)
library(readxl)
library(readxl)
df_excel <- read_excel("excel_exam.xlsx", col_names = T)
View(df_exam)
View(df_excel)
head(df_excel)
tail(df_excel)
class(df_excel)
mean(df_excel$math)
mead(df_excel$science)
mean(df_excel$science)
install.packages("xlsx")
library(xlsx)
write.xlsx(setosa, "setosa.xlsx", row.names = F)
score <- matrix(c(10,40,60,20,21,60,70,30), 4, 2)
score
colnames(score) <- c("male", "female")
score
score[2,]
score[,2]
score[3,2]
state.x77
st <- data.frame(state.x77)
st
colnames(st)
rownames(st)
table(st)
table(iris[,5])
table(st[])
table(st[1,])
nrow(st)
ncol(st)
str(st)
rowsum(st)
st
st[1,1]
rowsum(st[1,])
rowSums(st)
rowMeans(st)
colSums(st)
colMeans(st)
subset(st,row = "Flrida")
subset(st, "Flrida")
st["Flrida",]
st["Florida",]
st[,"Income"]
st["Texas", "Area"]
st["Ohio", 1:2]
subset(st, "Population" >= 5000)
subset(st, Population >= 5000)
subset(st, Population >= 5,000)
subset(st, Income >= 4500)
subset(st[,c("Population","Income","Area")], Income >= 4500)
nrow(subset(st, Income >= 4500))
subset(st, Area >= 100000, Frost >= 120)
subset(st, Area >= 100000 & Frost >= 120)
subset(st, Population < 2000 & Murder < 12)
subset(st[,"Income"], Illiteracy < 2.0)
subset(st, Illiteracy < 2.0)
x <- subset(st, Illiteracy < 2.0)
colMeans(x[,"Income"])
colMeans(x[,Income])
colMeans(x)
colMeans(x[,2])
colMeans(x[1,])
colMeans(x[,1])
rowMeans(x[,1])
rowMeans(x)
colMeans(x)
x
colMeans(x)
x[,2]
colMeans(x[,2])
colMeans(x[1,2])
colMeans(x[2,2])
x <- x[,2]
x
colMeans(x)
rowMeans(x)
mean(x)
x <- subset(st, Illiteracy < 2.0)
mean(x[,2])
mean(x[,"Income"])
x <- subset(st, Illiteracy < 2.0)
y <- subset(st, Illiteracy >= 2.0)
x
y
x <- mean(x[,"Income"])
y <- mean(y[,"Income"])
x - y
max(st[,"Life Exp"])
max(st[,"Life.Exp"])
subset(st, Life.Exp ==max(st[,"Life.Exp"]))
subset(st, Income > st["Pennsylvania", "Income"])
st["Pennsylvania", "Income"]
class(mtcars)
nrow(mtcars)
ncol(mtcars)
class(mtcars[1,])
class(mtcars[,colnames(mtcars)])
colnames(mtcars)
class(mtcars[,c(colnames(mtcars))])
mtcars[,c(colnames(mtcars))
c(colnames(mtcars))
colnames(mtcars)
class(mtcars[,colnames(mtcars)])
mtcars[,colnames(mtcars)]
x <- colnames(mtcars)
class(x)
class(mtcars[,x])
class(mtcars[,8])
class(mtcars[,7])
class(mtcars[,1])
class(mtcars[,5])
class(mtcars[,1:8])
mpg(mile per gallon)
dim(mtcars)
mtcars
str(mtcars)
mtcars[,max(mtcars[,"mpg"])]
max(mtcars[,"mpg"])
subset(mtcars, mpg == max(mtcars[,"mpg"]))
row.names(subset(mtcars, mpg == max(mtcars[,"mpg"])))
subset(mtcars, mpg == max(mtcars[,"mpg"]))
subset(mtcars, mpg == max(mtcars[,"mpg"]))
subset(mtcars, gear == 4 & mpg == min(mtcars[,"mpg"]))
min(mtcars[,"mpg"])
subset(mtcars, gear == 4 & mpg == min(mtcars[,"mpg"]))
mtcars
subset(mtcars, mpg == max(mtcars[,"mpg"]))
mpg == min(mtcars[,"mpg"])
subset(mtcars, gear == 4 & mpg == min(mtcars[,"mpg"]))
min(mtcars[,"mpg"])
x <- subset(mtcars, gear == 4)
subset(x, mpg == min(x[,"mpg"]))
min(x[,"mpg"])
mtcars
mtcars["Honda Civic", c("mpg", "gear")]
subset(mtcars, mpg > max(mtcars["Pontiac Firebird", "mpg"]))
colMeans(mtcars[,"mpg"])
mtcars[,"mpg"]
mean(mtcars[,"mpg"])
unique(mtcars[,"gear"])
class(airquality)
head(airquality)
subset(airquality, Temp == max(airquality[,"Temp"]))
x <- subset(airquality, Temp == max(airquality[,"Temp"]))
x[,c("Month", "Day")]
airquality
subset(airquality, Wind == max(airquality[,Wind]))
max(airquality[,Wind])
subset(airquality, Wind == max(airquality[,Wind]))
subset(airquality, Wind == max(airquality[,"Wind"]))
subset(airquality, Month == 6)
x <- subset(airquality, Month == 6)
subset(airquality, Wind == max(x[,"Wind"]))
x <- subset(airquality, Month == 7)
mean(x[,"Temp"])
colMeans(subset(airquality, Month==5 & !is.na(airquality$Ozone), select = Ozone))
subset(airquality, Ozone > 100)
nrow(subset(airquality, Ozone > 100))
str(swiss)
swiss
head(swiss)
rownames(subset(swiss, Agriculture == max(swiss[,"Agriculture"])))
swiss[order(swiss$Agriculture),]
order(swiss$Agriculture)
subset(swiss, Catholic >= 80, select = Agriculture)
subset(swiss, Examination < 20 & Agriculture < 50)
subset(swiss, Examination < 20 & Agriculture < 50, select = c("Examination", "Agriculture"))
rich_state <- subset(state.x77, Income >= 5000, select = c("Income", "Population", "Area"))
state.x77
rich_state <- subset(state.x77, Income >= 5000, select = c("Income", "Population", "Area"))
subset(state.x77, Income >= 5000, select = c("Income", "Population", "Area"))
c("Income", "Population", "Area")
rich_state <- subset(state.x77, Income >= 5000)
rich_state <- subset(state.x77, Income => 5000)
subset(state.x77, Income > 5000)
subset(swiss, Examination < 20 & Agriculture < 50, select = c("Examination", "Agriculture"))
subset(state.x77)
class(state.x77)
subset(state.x77, Income >= 50)
rich_state <- subset.data.frame(state.x77, Income >= 5000, select = c("Income", "Population", "Area"))
x <- data.frame(state.x77)
rich_state <- subset(x, Income >= 5000, select = c("Income", "Population", "Area"))
rich_state
setwd("C:/Users/Administrator/Google 드라이브/R/Practice_Chap03(매트릭스와 데이터프레임)")
write.csv(rich_state, "rich_state.csv", F)
ds <- read.csv("rich_state.csv", T)
ds
